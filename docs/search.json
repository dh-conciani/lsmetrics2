[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bernardo Niebuhr. Author, maintainer. Maurício Humberto Vancine. Author. Renata L. Muylaert. Author. John Wesley Ribeiro. Author. Milton Cezar Ribeiro. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Niebuhr B, Vancine M, Muylaert R, Ribeiro J, Ribeiro M (2023). lsmetrics: lsmetrics. https://mauriciovancine.github.io/lsmetrics, https://github.com/mauriciovancine/lsmetrics,.","code":"@Manual{,   title = {lsmetrics: lsmetrics},   author = {Bernardo Niebuhr and Maurício Humberto Vancine and Renata L. Muylaert and John Wesley Ribeiro and Milton Cezar Ribeiro},   year = {2023},   note = {https://mauriciovancine.github.io/lsmetrics, https://github.com/mauriciovancine/lsmetrics,}, }"},{"path":"/index.html","id":"lsmetrics-","dir":"","previous_headings":"","what":"lsmetrics","title":"lsmetrics","text":"lsmetrics provides tools calculate landscape metrics using R GRASS GIS.","code":""},{"path":"/index.html","id":"instalation","dir":"","previous_headings":"","what":"Instalation","title":"lsmetrics","text":"install development version lsmetrics R package, please use:","code":"library(pak) pak::pkg_install(\"mauriciovancine/lsmetrics\")"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/lsm_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patch area — lsm_area","title":"Calculate patch area — lsm_area","text":"Identifies patches calculates area hectare.","code":""},{"path":"/reference/lsm_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patch area — lsm_area","text":"","code":"lsm_area(input, output = NULL, zero_as_na = FALSE)"},{"path":"/reference/lsm_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patch area — lsm_area","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells.","code":""},{"path":"/reference/lsm_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate patch area — lsm_area","text":"","code":"library(lsmetrics) library(terra) #> terra 1.7.29  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"   # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_area(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying the patches #> Counting the cell number of patches #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of patches #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_pid <- rgrass::read_RAST(\"r_pid\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_pid, legend = FALSE, axes = FALSE, main = \"Patch id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_pid)   # import from grass to r r_area <- rgrass::read_RAST(\"r_area_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_area, legend = FALSE, axes = FALSE, main = \"Area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_area)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_core_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the core and edge of landscape elements — lsm_core_edge","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"Identify core edge landscape elements pixel. Calculate area, original area percentage core edge.","code":""},{"path":"/reference/lsm_core_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"","code":"lsm_core_edge(   input,   output = NULL,   zero_as_na = FALSE,   edge_depth,   type = \"all\",   ncell = FALSE,   area_integer = FALSE,   calculate_area = FALSE,   core_edge_original = FALSE,   calculate_percentage = FALSE,   core_number = FALSE,   buffer_radius = NULL,   buffer_circular = FALSE )"},{"path":"/reference/lsm_core_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. edge_depth [numeric]  Integer indicating edge distance meters considered adjacent form patch. type [character=\"\"] ncell [logical(1)=FALSE]  TRUE area_integer [logical(1)=FALSE]  TRUE calculate_area [logical(1)=FALSE] calculate_percentage [logical(1)=FALSE] core_number [logical(1)=FALSE] buffer_radius [numeric] buffer_circular [logical(1)=FALSE]","code":""},{"path":"/reference/lsm_core_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"","code":"library(lsmetrics) library(terra) #> terra 1.7.29  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"   # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # core and edge lsmetrics::lsm_core_edge(input = \"r\",                          edge_depth = 100,                          type = \"all\",                          core_number = TRUE,                          core_edge_original = TRUE,                          calculate_area = TRUE,                          calculate_percentage = TRUE,                          buffer_radius = 100,                          buffer_circular = FALSE) #> Converting null and zero #> Calculating core #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating core area #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating core percentage #> Calculating proportion #> Calculating proportion #> Opening selection map <r_core100_bin> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating percentage #> Changing the raster color #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating edge #> Calculating edge area #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating edge percentage #> Calculating proportion #> Calculating proportion #> Opening selection map <r_edge100_bin> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating percentage #> Changing the raster color #> Cleaning rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_core100 <- rgrass::read_RAST(\"r_core100\", flags = \"quiet\", return_format = \"terra\") r_core100_area_ha <- rgrass::read_RAST(\"r_core100_area_ha\", flags = \"quiet\", return_format = \"terra\") r_core100_area_ha_original <- rgrass::read_RAST(\"r_core100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") r_core100_core_number <- rgrass::read_RAST(\"r_core100_core_number_original\", flags = \"quiet\", return_format = \"terra\") r_core100_pct_buf100 <- rgrass::read_RAST(\"r_core100_pct_buf100\", flags = \"quiet\", return_format = \"terra\")  r_edge100 <- rgrass::read_RAST(\"r_edge100\", flags = \"quiet\", return_format = \"terra\") r_edge100_area_ha <- rgrass::read_RAST(\"r_edge100_area_ha\", flags = \"quiet\", return_format = \"terra\") r_edge100_area_ha_original <- rgrass::read_RAST(\"r_edge100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") r_edge100_pct_buf100 <- rgrass::read_RAST(\"r_edge100_pct_buf100\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_core100, legend = FALSE, axes = FALSE, main = \"Core\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100)   plot(r_core100_area_ha, legend = FALSE, axes = FALSE, main = \"Core area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha)   plot(r_core100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Core area original (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha_original)   plot(r_core100_core_number, legend = FALSE, axes = FALSE, main = \"Number of cores\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_core_number)   plot(r_core100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Core percentage (buffer 100 m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_pct_buf100, cex = .75)    plot(r_edge100, legend = FALSE, axes = FALSE, main = \"Edge\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100)   plot(r_edge100_area_ha, legend = FALSE, axes = FALSE, main = \"Edge area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha)   plot(r_edge100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Edge area original (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha_original)   plot(r_edge100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Edge percentage (buffer 100 m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_pct_buf100, cex = .75)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment distance — lsm_distance","title":"Calculate fragment distance — lsm_distance","text":"Calculate distance inside outside fragmentes meters r.grow.distance GRASS GIS module.","code":""},{"path":"/reference/lsm_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment distance — lsm_distance","text":"","code":"lsm_distance(input, output = NULL, zero_as_na = FALSE, type)"},{"path":"/reference/lsm_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment distance — lsm_distance","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  fragment area map name inside GRASS Data Base. zero_as_na [logical=\"\"] type [character=\"\"]","code":""},{"path":"/reference/lsm_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment distance — lsm_distance","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # distance lsm_distance(input = \"r\", zero_as_na = FALSE, type = \"inside\") #> Converting zero as null #> Creating raster inverse #> Calculation distance #> Reading raster map <r_inside>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output raster maps... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Transforming raster to integer #> Changing the raster color #> Cleaning rasters lsm_distance(input = \"r\", zero_as_na = FALSE, type = \"outside\") #> Converting zero as null #> Calculation distance #> Reading raster map <r_distance_null>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output raster maps... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Transforming raster to integer #> Changing the raster color #> Cleaning rasters #> Warning: The command: #> g.remove -b -f --quiet type=raster name=r_inside #> produced at least one warning during execution: #> WARNING: No data base element files found #> WARNING: No data base element files found  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_dist_in <- terra::rast(rgrass::read_RAST(\"r_distance_inside\", flags = \"quiet\", return_format = \"SGDF\")) #> The legacy packages maptools, rgdal, and rgeos, underpinning this package #> will retire shortly. Please refer to R-spatial evolution reports on #> https://r-spatial.org/r/2023/05/15/evolution4.html for details. #> This package is now running under evolution status 0  #> Please note that rgdal will be retired during October 2023, #> plan transition to sf/stars/terra functions using GDAL and PROJ #> at your earliest convenience. #> See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution #> rgdal: version: 1.6-7, (SVN revision 1203) #> Geospatial Data Abstraction Library extensions to R successfully loaded #> Loaded GDAL runtime: GDAL 3.6.2, released 2023/01/02 #> Path to GDAL shared files: /usr/share/gdal #>  GDAL does not use iconv for recoding strings. #> GDAL binary built with GEOS: TRUE  #> Loaded PROJ runtime: Rel. 9.1.1, December 1st, 2022, [PJ_VERSION: 911] #> Path to PROJ shared files: /home/mude/.local/share/proj:/usr/share/proj #> PROJ CDN enabled: FALSE #> Linking to sp version:1.6-1 #> To mute warnings of possible GDAL/OSR exportToProj4() degradation, #> use options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal. #> Creating BIL support files... #> Exporting raster as integer values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% r_dist_out <- terra::rast(rgrass::read_RAST(\"r_distance_outside\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as integer values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100%  # plot plot(r_dist_in, legend = FALSE, axes = FALSE, main = \"Distance inside (m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_dist_in, cex = .5)   plot(r_dist_out, legend = FALSE, axes = FALSE, main = \"Distance outside (m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_dist_out, cex = .5)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_fragment_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment area — lsm_fragment_area","title":"Calculate fragment area — lsm_fragment_area","text":"Identifies fragmentes calculates area hectare.","code":""},{"path":"/reference/lsm_fragment_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment area — lsm_fragment_area","text":"","code":"lsm_fragment_area(   input,   output = NULL,   zero_as_na = FALSE,   id = FALSE,   ncell = FALSE,   area_integer = FALSE )"},{"path":"/reference/lsm_fragment_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment area — lsm_fragment_area","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. id [logical(1)=FALSE] ncell [logical(1)=FALSE] area_integer [logical(1)=FALSE] #'","code":""},{"path":"/reference/lsm_fragment_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment area — lsm_fragment_area","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_fragment_area(input = \"r\", id = TRUE, ncell = TRUE, area_integer = TRUE) #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_fragment_id <- rgrass::read_RAST(\"r_fragment_id\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_fragment_id, legend = FALSE, axes = FALSE, main = \"Fragment id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_id)   # import from grass to r r_fragment_area <- rgrass::read_RAST(\"r_fragment_area_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_fragment_area, legend = FALSE, axes = FALSE, main = \"Fragment area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_area)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_fragment_fill_holes.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill holes in fragments — lsm_fragment_fill_holes","title":"Fill holes in fragments — lsm_fragment_fill_holes","text":"Fill holes fragments","code":""},{"path":"/reference/lsm_fragment_fill_holes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill holes in fragments — lsm_fragment_fill_holes","text":"","code":"lsm_fragment_fill_holes(input, output = NULL, zero_as_na = FALSE)"},{"path":"/reference/lsm_fragment_fill_holes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill holes in fragments — lsm_fragment_fill_holes","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells.","code":""},{"path":"/reference/lsm_fragment_fill_holes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill holes in fragments — lsm_fragment_fill_holes","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_fragment_fill_holes(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying the fragments #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  16%  33%  50%  66%  83% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 3 clumps. #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_fragment_fill_holes <- rgrass::read_RAST(\"r_fragment_fill_holes\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_fragment_fill_holes, legend = FALSE, axes = FALSE, main = \"Fragment fill holes\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_fragment_fill_holes)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_functional_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate functional connectivity — lsm_functional_connectivity","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"Identifies functional fragmentes connected calculate area hectare.","code":""},{"path":"/reference/lsm_functional_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"","code":"lsm_functional_connectivity(   input,   output = NULL,   zero_as_na = FALSE,   id = FALSE,   ncell = FALSE,   area_integer = FALSE,   gap_crossing,   dilation = FALSE )"},{"path":"/reference/lsm_functional_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Habitat area map name output GRASS Data Base zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. id [logical(1)=FALSE]  TRUE ncell [logical(1)=FALSE]  TRUE area_integer [logical(1)=FALSE]  TRUE gap_crossing [numeric]  Integer indicating gap crossing distance. dilation [logical(1)=FALSE]  TRUE","code":""},{"path":"/reference/lsm_functional_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # functional connectivity lsm_functional_connectivity(input = \"r\", gap_crossing = 100, id = TRUE, dilation = TRUE) #> Dilation pixels #> Opening selection map <r_functional_connectivity_bin> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Converting zero as null #> Identifying the fragmentes for gap crossing #> Multipling id by original habitat #> Counting the number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes #> Removing extra rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import do r r_functional_connected_area200_id <- rgrass::read_RAST(\"r_functional_connected_area200_id\", flags = \"quiet\", return_format = \"terra\") r_dilation200_null <- rgrass::read_RAST(\"r_dilation200_null\", flags = \"quiet\", return_format = \"terra\")  plot(r_dilation200_null, legend = FALSE, axes = FALSE,      main = \"Functional connected area id (200 m)\") plot(r_functional_connected_area200_id, legend = FALSE, axes = FALSE, add = TRUE) plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_functional_connected_area200_id)   # import to r r_functional_connected_area200_ha <- rgrass::read_RAST(\"r_functional_connected_area200_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_dilation200_null, legend = FALSE, axes = FALSE,      main = \"Functional connected area (ha) (200 m)\") plot(r_functional_connected_area200_ha, legend = FALSE, axes = FALSE, add = TRUE) plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_functional_connected_area200_ha)   # import to r r_functional_connectivity200 <- rgrass::read_RAST(\"r_functional_connectivity200\", flags = \"quiet\", return_format = \"terra\")  plot(r_dilation200_null, legend = FALSE, axes = FALSE,      main = \"Functional connectivity (ha) (200 m)\") plot(r_functional_connectivity200, legend = FALSE, axes = FALSE, add = TRUE) plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_functional_connectivity200)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_morphology.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifies landscape morphologies — lsm_morphology","title":"Identifies landscape morphologies — lsm_morphology","text":"Identifies landscape morphologies: matrix, core, edge, corridor, stepping stone, branch perforation","code":""},{"path":"/reference/lsm_morphology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifies landscape morphologies — lsm_morphology","text":"","code":"lsm_morphology(input, output = NULL, morphology = \"all\", zero_as_na = FALSE)"},{"path":"/reference/lsm_morphology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifies landscape morphologies — lsm_morphology","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. morphology [character=\"\"] zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. input_distance_inside [character=\"\"]  Distance inside map created using lsmetrics::lsm_distance() function type = \"inside\".","code":""},{"path":"/reference/lsm_morphology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifies landscape morphologies — lsm_morphology","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # morphology lsmetrics::lsm_morphology(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying the patches #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  16%  33%  50%  66%  83% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 3 clumps. #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  14%  28%  42%  57%  71%  85% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 6 clumps. #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  20%  40%  60%  80% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 5 clumps. #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  16%  33%  50%  66%  83% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 5 clumps. #> Opening selection map <r_edge_null> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  25%  50%  75% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 4 clumps. #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Removing raster <r_branch_corridor> #> Changing the raster color #> Cleaning rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_mophology <- rgrass::read_RAST(\"r_morphology\", flags = \"quiet\", return_format = \"terra\") r_core <- rgrass::read_RAST(\"r_core\", flags = \"quiet\", return_format = \"terra\") r_edge <- rgrass::read_RAST(\"r_edge\", flags = \"quiet\", return_format = \"terra\") r_corridor <- rgrass::read_RAST(\"r_corridor\", flags = \"quiet\", return_format = \"terra\") r_branch <- rgrass::read_RAST(\"r_branch\", flags = \"quiet\", return_format = \"terra\") r_stepping_stone <- rgrass::read_RAST(\"r_stepping_stone\", flags = \"quiet\", return_format = \"terra\") r_perforation <- rgrass::read_RAST(\"r_perforation\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_mophology, legend = FALSE, axes = FALSE, main = \"Morphology\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_mophology)   plot(r_core, legend = FALSE, axes = FALSE, main = \"Core\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core)   plot(r_edge, legend = FALSE, axes = FALSE, main = \"Edge\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge)   plot(r_corridor, legend = FALSE, axes = FALSE, main = \"Corridor\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_corridor)   plot(r_branch, legend = FALSE, axes = FALSE, main = \"Branch\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_branch)   plot(r_stepping_stone, legend = FALSE, axes = FALSE, main = \"Stepping stone\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_stepping_stone)   plot(r_perforation, legend = FALSE, axes = FALSE, main = \"Perforation\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_perforation)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_patch_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patch area — lsm_patch_area","title":"Calculate patch area — lsm_patch_area","text":"Identifies patch calculates area hectare.","code":""},{"path":"/reference/lsm_patch_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patch area — lsm_patch_area","text":"","code":"lsm_patch_area(   input,   output = NULL,   zero_as_na = FALSE,   id = FALSE,   ncell = FALSE,   area_integer = FALSE,   patch_original = FALSE,   patch_number = FALSE )"},{"path":"/reference/lsm_patch_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patch area — lsm_patch_area","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. id [logical(1)=FALSE]  TRUE ncell [logical(1)=FALSE]  TRUE area_integer [logical(1)=FALSE]  TRUE patch_original [logical(1)=FALSE]  TRUE patch_number [logical(1)=FALSE]  TRUE","code":""},{"path":"/reference/lsm_patch_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate patch area — lsm_patch_area","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # patch area lsmetrics::lsm_patch_area(input = \"r\", id = TRUE, patch_original = TRUE, patch_number = TRUE) #> Converting zero as null #> Identifying the patches #> Converting zero as null #> Identifying the fragments #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  16%  33%  50%  66%  83% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 3 clumps. #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Changing the raster color #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  20%  40%  60%  80% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 5 clumps. #> Counting the cell number of patches #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of patches #> Changing the raster color #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Cleaning rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_patch_id <- rgrass::read_RAST(\"r_patch_id\", flags = \"quiet\", return_format = \"terra\")  plot(r_patch_id, legend = FALSE, axes = FALSE, main = \"Patch id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_id)   r_patch_area <- rgrass::read_RAST(\"r_patch_area_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_patch_area, legend = FALSE, axes = FALSE, main = \"Patch area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_area)   r_patch_area_original <- rgrass::read_RAST(\"r_patch_area_ha_original\", flags = \"quiet\", return_format = \"terra\")  plot(r_patch_area_original, legend = FALSE, axes = FALSE, main = \"Patch area original (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_area_original)   r_patch_number_original <- rgrass::read_RAST(\"r_patch_number_original\", flags = \"quiet\", return_format = \"terra\")  plot(r_patch_number_original, legend = FALSE, axes = FALSE, main = \"Number of patch (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_patch_number_original)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_percentage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fragment percentage — lsm_percentage","title":"Calculate fragment percentage — lsm_percentage","text":"Calculate focal (\"moving window\") values cell using mean r.neighbors module multiplies 100.","code":""},{"path":"/reference/lsm_percentage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fragment percentage — lsm_percentage","text":"","code":"lsm_percentage(   input,   output = NULL,   zero_as_na = FALSE,   buffer_radius,   buffer_circular = FALSE )"},{"path":"/reference/lsm_percentage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fragment percentage — lsm_percentage","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Habitat map output name inside GRASS Data Base. zero_as_na [logical=\"\"] buffer_radius [numeric()]  Integer indicating window size. buffer_cirular [logical=\"\"]","code":""},{"path":"/reference/lsm_percentage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fragment percentage — lsm_percentage","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\"), vname = \"r\") #> Over-riding projection check #> Importing raster map <r>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> SpatRaster read into GRASS using r.in.gdal from file  # percentage lsmetrics::lsm_percentage(input = \"r\", zero_as_na = FALSE, buffer_radius = 100) #> Calculating proportion #> Calculating proportion #> Opening selection map <r_bin> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating percentage #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_pct_buf100 <- rgrass::read_RAST(\"r_pct_buf100\", return_format = \"terra\") #> Checking GDAL data type and nodata value... #>    6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Using GDAL data type <Byte> #> Exporting raster data to RRASTER format... #>    6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.out.gdal complete. File <\/tmp/RtmpIWyP21/file2a71020bfb5.grd> created.  # plot plot(r_pct_buf100, legend = FALSE, axes = FALSE, main = \"Habitat percentage (buffer 100 m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_pct_buf100, cex = .75)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_structural_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate structural connectivity — lsm_structural_connectivity","title":"Calculate structural connectivity — lsm_structural_connectivity","text":"Identifies patch calculates area hectare.","code":""},{"path":"/reference/lsm_structural_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate structural connectivity — lsm_structural_connectivity","text":"","code":"lsm_structural_connectivity(   input,   output = NULL,   ncell = FALSE,   area_integer = FALSE,   zero_as_na = FALSE )"},{"path":"/reference/lsm_structural_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate structural connectivity — lsm_structural_connectivity","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. ncell [logical(1)=FALSE]  TRUE area_integer [logical(1)=FALSE]  TRUE zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. id [logical(1)=FALSE]  TRUE","code":""},{"path":"/reference/lsm_structural_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate structural connectivity — lsm_structural_connectivity","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # structural connectivity lsmetrics::lsm_structural_connectivity(input = \"r\") #> Converting zero as null #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  11%  22%  33%  44%  55%  66%  77%  88% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 6 clumps. #> Converting zero as null #> Identifying the fragmentes #> Counting the cell number of fragmentes #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of fragmentes #> Converting zero as null #> Identifying the patches #> Converting zero as null #> Identifying the fragments #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  16%  33%  50%  66%  83% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 3 clumps. #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Changing the raster color #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  20%  40%  60%  80% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 5 clumps. #> Counting the cell number of patches #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of patches #> Changing the raster color #> Cleaning rasters #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Cleaning rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_structural_connected_area <- rgrass::read_RAST(\"r_structural_connected_area\", flags = \"quiet\", return_format = \"terra\")  plot(r_structural_connected_area, legend = FALSE, axes = FALSE, main = \"Structural connected area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_structural_connected_area)   # import from grass to r r_structural_connectivity <- rgrass::read_RAST(\"r_structural_connectivity\", flags = \"quiet\", return_format = \"terra\")  plot(r_structural_connectivity, legend = FALSE, axes = FALSE, main = \"Structural connectivity (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_structural_connectivity)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_toy_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a toy landscape — lsm_toy_landscape","title":"Create a toy landscape — lsm_toy_landscape","text":"Create toy landscape.","code":""},{"path":"/reference/lsm_toy_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a toy landscape — lsm_toy_landscape","text":"","code":"lsm_toy_landscape()"},{"path":"/reference/lsm_toy_landscape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a toy landscape — lsm_toy_landscape","text":"","code":"library(lsmetrics) library(terra)  # toy landscape toy_landscape <- lsm_toy_landscape()  # plot plot(toy_landscape, legend = FALSE, axes = FALSE, main = \"Toy landscape\") plot(as.polygons(toy_landscape, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(toy_landscape), add = TRUE) text(toy_landscape)"},{"path":[]}]
