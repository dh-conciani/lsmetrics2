[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bernardo Niebuhr. Author, maintainer. Maurício Humberto Vancine. Author. Renata de Lara Muylaert. Author. John Wesley Ribeiro. Author. Milton Cezar Ribeiro. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Niebuhr B, Vancine M, Muylaert R, Ribeiro J, Ribeiro M (2023). lsmetrics: lsmetrics. https://mauriciovancine.github.io/lsmetrics, https://github.com/mauriciovancine/lsmetrics,.","code":"@Manual{,   title = {lsmetrics: lsmetrics},   author = {Bernardo Niebuhr and Maurício Humberto Vancine and Renata de Lara Muylaert and John Wesley Ribeiro and Milton Cezar Ribeiro},   year = {2023},   note = {https://mauriciovancine.github.io/lsmetrics, https://github.com/mauriciovancine/lsmetrics,}, }"},{"path":"/index.html","id":"lsmetrics-","dir":"","previous_headings":"","what":"lsmetrics","title":"lsmetrics","text":"lsmetrics provides tools calculate landscape metrics using R GRASS GIS.","code":""},{"path":"/index.html","id":"instalation","dir":"","previous_headings":"","what":"Instalation","title":"lsmetrics","text":"install development version lsmetrics R package, please use:","code":"library(pak) pak::pkg_install(\"mauriciovancine/lsmetrics\")"},{"path":"/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"/reference/lsm_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patch area — lsm_area","title":"Calculate patch area — lsm_area","text":"Identifies patches calculates area hectare.","code":""},{"path":"/reference/lsm_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patch area — lsm_area","text":"","code":"lsm_area(input, output = NULL, zero_as_na = FALSE)"},{"path":"/reference/lsm_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patch area — lsm_area","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells.","code":""},{"path":"/reference/lsm_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate patch area — lsm_area","text":"","code":"library(lsmetrics) library(terra) #> terra 1.7.29  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)  # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"   # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # area lsmetrics::lsm_area(input = \"r\", zero_as_na = FALSE) #> Converting zero as null #> Identifying the patches #> Counting the cell number of patches #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of patches #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_pid <- rgrass::read_RAST(\"r_pid\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_pid, legend = FALSE, axes = FALSE, main = \"Patch id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_pid)   # import from grass to r r_area <- rgrass::read_RAST(\"r_area_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_area, legend = FALSE, axes = FALSE, main = \"Area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_area)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_core_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the core and edge of landscape elements — lsm_core_edge","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"Identify core edge landscape elements pixel. Calculate area, original area percentage core edge.","code":""},{"path":"/reference/lsm_core_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"","code":"lsm_core_edge(   input,   output = NULL,   zero_as_na = FALSE,   edge_depth,   type = \"all\",   calculate_area = FALSE,   original_pid,   calculate_percentage = FALSE,   buffer_radius = NULL )"},{"path":"/reference/lsm_core_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Map name output inside GRASS Data Base. zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. edge_depth [numeric]  Integer indicating edge distance meters considered adjacent form patch. type [character=\"\"] calculate_area [logical(1)=FALSE] calculate_percentage [logical(1)=FALSE] buffer_radius [numeric]","code":""},{"path":"/reference/lsm_core_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the core and edge of landscape elements — lsm_core_edge","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # core and edge lsm_core_edge(input = \"r\",               edge_depth = 100,               type = \"all\",               calculate_area = TRUE,               calculate_percentage = TRUE,               buffer_radius = 100) #> Calculating core #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating core area #> Converting zero as null #> Identifying the patches #> Counting the cell number of patches #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of patches #> Changing the raster color #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating core percentage #> Calculating proportion #> Opening selection map <r_core100> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating percentage #> Changing the raster color #> Calculating edge #> Calculating edge area #> Converting zero as null #> Identifying the patches #> Counting the cell number of patches #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area of patches #> Changing the raster color #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating edge percentage #> Calculating proportion #> Opening selection map <r_edge100> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating percentage #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_core100 <- rgrass::read_RAST(\"r_core100\", flags = \"quiet\", return_format = \"terra\") r_core100_area_ha <- rgrass::read_RAST(\"r_core100_area_ha\", flags = \"quiet\", return_format = \"terra\") r_core100_area_ha_original <- rgrass::read_RAST(\"r_core100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") r_core100_pct_buf100 <- rgrass::read_RAST(\"r_core100_pct_buf100\", flags = \"quiet\", return_format = \"terra\")  r_edge100 <- rgrass::read_RAST(\"r_edge100\", flags = \"quiet\", return_format = \"terra\") r_edge100_area_ha <- rgrass::read_RAST(\"r_edge100_area_ha\", flags = \"quiet\", return_format = \"terra\") r_edge100_area_ha_original <- rgrass::read_RAST(\"r_edge100_area_ha_original\", flags = \"quiet\", return_format = \"terra\") r_edge100_pct_buf100 <- rgrass::read_RAST(\"r_edge100_pct_buf100\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_core100, legend = FALSE, axes = FALSE, main = \"Core\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100)   plot(r_core100_area_ha, legend = FALSE, axes = FALSE, main = \"Core area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha)   plot(r_core100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Core area original (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_area_ha_original)   plot(r_core100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Core percentage (buffer 100 m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_core100_pct_buf100, cex = .75)    plot(r_edge100, legend = FALSE, axes = FALSE, main = \"Edge\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100)   plot(r_edge100_area_ha, legend = FALSE, axes = FALSE, main = \"Edge area (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha)   plot(r_edge100_area_ha_original, legend = FALSE, axes = FALSE, main = \"Edge area original (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_area_ha_original)   plot(r_edge100_pct_buf100, legend = FALSE, axes = FALSE, main = \"Edge percentage (buffer 100 m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_edge100_pct_buf100, cex = .75)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patch distance — lsm_distance","title":"Calculate patch distance — lsm_distance","text":"Calculate distance inside outside patches meters r.grow.distance GRASS GIS module.","code":""},{"path":"/reference/lsm_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patch distance — lsm_distance","text":"","code":"lsm_distance(input, output = NULL, zero_as_na = FALSE, type)"},{"path":"/reference/lsm_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patch distance — lsm_distance","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Patch area map name inside GRASS Data Base. zero_as_na [logical=\"\"] type [character=\"\"]","code":""},{"path":"/reference/lsm_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate patch distance — lsm_distance","text":"","code":"library(lsmetrics) library(terra) library(sp)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # distance lsm_distance(input = \"r\", zero_as_na = FALSE, type = \"inside\") #> Converting zero as null #> Creating raster inverse #> Calculation distance #> Reading raster map <r_inside>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output raster maps... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Transforming raster to integer #> Changing the raster color lsm_distance(input = \"r\", zero_as_na = FALSE, type = \"outside\") #> Converting zero as null #> Calculation distance #> Reading raster map <r_null>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output raster maps... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Transforming raster to integer #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_dist_in <- terra::rast(rgrass::read_RAST(\"r_distance_inside\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as integer values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% r_dist_out <- terra::rast(rgrass::read_RAST(\"r_distance_outside\", flags = \"quiet\", return_format = \"SGDF\")) #> Creating BIL support files... #> Exporting raster as integer values (bytes=4) #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100%  # plot plot(r_dist_in, legend = FALSE, axes = FALSE, main = \"Distance inside (m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_dist_in, cex = .5)   plot(r_dist_out, legend = FALSE, axes = FALSE, main = \"Distance outside (m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_dist_out, cex = .5)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_functional_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate functional connectivity — lsm_functional_connectivity","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"Identifies functional patches connected calculate area hectare.","code":""},{"path":"/reference/lsm_functional_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"","code":"lsm_functional_connectivity(   input,   output = NULL,   zero_as_na = FALSE,   input_distance_outside,   gap_crossing )"},{"path":"/reference/lsm_functional_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Patch area map name inside GRASS Data Base zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. input_distance_outside [character=\"\"]  Distance outside map created using lsmetrics::lsm_distance() function type = \"outside\". gap_crossing [numeric]  Integer indicating gap crossing distance.","code":""},{"path":"/reference/lsm_functional_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate functional connectivity — lsm_functional_connectivity","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\") #> SpatRaster read into GRASS using r.in.gdal from file  # functional connectivity lsm_functional_connectivity(input = \"r\",                             zero_as_na = FALSE,                             gap_crossing = 100) #> Selecting gap crossing pixels #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Summing gap crossing pixels to habitat raster #> Converting zero as null #> Identifying the patches #> Multipling pid by original habitat #> Counting the number of patches #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating the area #> Changing the raster color #> Removing extra rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import do r r_confun100_pid <- rgrass::read_RAST(\"r_confun100_pid\", flags = \"quiet\", return_format = \"terra\")  plot(r_confun100_pid, legend = FALSE, axes = FALSE, main = \"Patch id\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_confun100_pid)   # import habitat patch area to r r_confun100_area <- rgrass::read_RAST(\"r_confun100_area_ha\", flags = \"quiet\", return_format = \"terra\")  plot(r_confun100_area, legend = FALSE, axes = FALSE, main = \"Functional connectivity (ha)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_confun100_area, cex = .7)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_morphology.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifies landscape morphologies — lsm_morphology","title":"Identifies landscape morphologies — lsm_morphology","text":"Identifies landscape morphologies: matrix, core, edge, corridor, stepping stone, branch perforation","code":""},{"path":"/reference/lsm_morphology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifies landscape morphologies — lsm_morphology","text":"","code":"lsm_morphology(   input,   output = NULL,   edge_depth,   morphology = \"all\",   zero_as_na = FALSE )"},{"path":"/reference/lsm_morphology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifies landscape morphologies — lsm_morphology","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat) inside GRASS Data Base. output [character=\"\"]  Map name output inside GRASS Data Base. edge_depth [numeric]  Integer indicating edge distance meters considered adjacent form patch. morphology [character=\"\"] zero_as_na [logical(1)=FALSE]  TRUE, function treats non-habitat cells null; FALSE, function converts non-habitat zero cells null cells. input_distance_inside [character=\"\"]  Distance inside map created using lsmetrics::lsm_distance() function type = \"inside\".","code":""},{"path":"/reference/lsm_morphology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifies landscape morphologies — lsm_morphology","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\", \"quiet\"), vname = \"r\", verbose = FALSE)  # morphology lsm_morphology(input = \"r\", zero_as_na = FALSE, edge_depth = 100) #> Converting zero as null #> Identifying the patches #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  14%  28%  42%  57%  71%  85% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 3 clumps. #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  12%  25%  37%  50%  62%  75%  87% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 6 clumps. #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  16%  33%  50%  66%  83% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 5 clumps. #> First pass #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Writing output map #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  14%  28%  42%  57%  71%  85% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 5 clumps. #> Opening selection map <r_edge_null> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Pass 1 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Generating renumbering scheme... #>    0%  25%  50%  75% 100% #> Pass 2 of 2... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.clump complete. 4 clumps. #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Removing raster <r_branch_corridor> #> Changing the raster color #> Cleaning rasters  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_mophology <- rgrass::read_RAST(\"r_morphology\", flags = \"quiet\", return_format = \"terra\")  # plot plot(r_mophology, legend = FALSE, axes = FALSE, main = \"Morphology\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_mophology)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":"/reference/lsm_percentage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate patch percentage — lsm_percentage","title":"Calculate patch percentage — lsm_percentage","text":"Calculate focal (\"moving window\") values cell using mean r.neighbors module multiplies 100.","code":""},{"path":"/reference/lsm_percentage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate patch percentage — lsm_percentage","text":"","code":"lsm_percentage(input, output = NULL, zero_as_na = FALSE, buffer_radius)"},{"path":"/reference/lsm_percentage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate patch percentage — lsm_percentage","text":"input [character=\"\"]  Habitat map, following binary classification (e.g. values 1,0 1,NA habitat,non-habitat). output [character=\"\"]  Patch area map name inside GRASS Data Base. zero_as_na [logical=\"\"] buffer_radius [numeric()]  Integer indicating window size.","code":""},{"path":"/reference/lsm_percentage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate patch percentage — lsm_percentage","text":"","code":"library(lsmetrics) library(terra)  # read habitat data f <- system.file(\"raster/toy_landscape_habitat.tif\", package = \"lsmetrics\") r <- terra::rast(f)  # plot plot(r, legend = FALSE, axes = FALSE, main = \"Binary habitat\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r)   # find grass path_grass <- as.character(link2GI::findGRASS()[1]) # windows users need to find, e.g. \"C:/Program Files/GRASS GIS 8.2\"  # create grassdb rgrass::initGRASS(gisBase = path_grass,                   SG = r,                   gisDbase = \"grassdb\",                   location = \"newLocation\",                   mapset = \"PERMANENT\",                   override = TRUE) #> gisdbase    grassdb  #> location    newLocation  #> mapset      PERMANENT  #> rows        16  #> columns     16  #> north       7525600  #> south       7524000  #> west        234000  #> east        235600  #> nsres       100  #> ewres       100  #> projection: #>  PROJCRS[\"WGS 84 / UTM zone 23S\", #>     BASEGEOGCRS[\"WGS 84\", #>         ENSEMBLE[\"World Geodetic System 1984 ensemble\", #>             MEMBER[\"World Geodetic System 1984 (Transit)\"], #>             MEMBER[\"World Geodetic System 1984 (G730)\"], #>             MEMBER[\"World Geodetic System 1984 (G873)\"], #>             MEMBER[\"World Geodetic System 1984 (G1150)\"], #>             MEMBER[\"World Geodetic System 1984 (G1674)\"], #>             MEMBER[\"World Geodetic System 1984 (G1762)\"], #>             MEMBER[\"World Geodetic System 1984 (G2139)\"], #>             ELLIPSOID[\"WGS 84\",6378137,298.257223563, #>                 LENGTHUNIT[\"metre\",1]], #>             ENSEMBLEACCURACY[2.0]], #>         PRIMEM[\"Greenwich\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433]], #>         ID[\"EPSG\",4326]], #>     CONVERSION[\"UTM zone 23S\", #>         METHOD[\"Transverse Mercator\", #>             ID[\"EPSG\",9807]], #>         PARAMETER[\"Latitude of natural origin\",0, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8801]], #>         PARAMETER[\"Longitude of natural origin\",-45, #>             ANGLEUNIT[\"degree\",0.0174532925199433], #>             ID[\"EPSG\",8802]], #>         PARAMETER[\"Scale factor at natural origin\",0.9996, #>             SCALEUNIT[\"unity\",1], #>             ID[\"EPSG\",8805]], #>         PARAMETER[\"False easting\",500000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8806]], #>         PARAMETER[\"False northing\",10000000, #>             LENGTHUNIT[\"metre\",1], #>             ID[\"EPSG\",8807]]], #>     CS[Cartesian,2], #>         AXIS[\"(E)\",east, #>             ORDER[1], #>             LENGTHUNIT[\"metre\",1]], #>         AXIS[\"(N)\",north, #>             ORDER[2], #>             LENGTHUNIT[\"metre\",1]], #>     USAGE[ #>         SCOPE[\"Engineering survey, topographic mapping.\"], #>         AREA[\"Between 48°W and 42°W, southern hemisphere between 80°S and equator, onshore and offshore. Brazil.\"], #>         BBOX[-80,-48,0,-42]], #>     ID[\"EPSG\",32723]]   # import raster from r to grass rgrass::write_RAST(x = r, flags = c(\"o\", \"overwrite\"), vname = \"r\") #> Over-riding projection check #> Importing raster map <r>... #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> SpatRaster read into GRASS using r.in.gdal from file  # percentage lsm_percentage(input = \"r\", zero_as_na = FALSE, buffer_radius = 100) #> Calculating proportion #> Opening selection map <r> #>    0%   6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Calculating percentage #> Changing the raster color  # files # rgrass::execGRASS(cmd = \"g.list\", type = \"raster\")  # import from grass to r r_pct <- rgrass::read_RAST(\"r_pct_buf100\", return_format = \"terra\") #> Checking GDAL data type and nodata value... #>    6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> Using GDAL data type <Byte> #> Exporting raster data to RRASTER format... #>    6%  12%  18%  25%  31%  37%  43%  50%  56%  62%  68%  75%  81%  87%  93% 100% #> r.out.gdal complete. File <\/tmp/RtmpMnm8B7/file57a30364ca6bd.grd> created.  # plot plot(r_pct, legend = FALSE, axes = FALSE, main = \"Habitat percentage (buffer 100 m)\") plot(as.polygons(r, dissolve = FALSE), lwd = .1, add = TRUE) plot(as.polygons(r), add = TRUE) text(r_pct, cex = .75)   # delete grassdb unlink(\"grassdb\", recursive = TRUE)"},{"path":[]}]
